<?php
/**
 * ListPass
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Team Pass API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ListPass Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ListPass implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ListPass';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'ref_id' => 'string',
        'token' => 'string',
        'gate' => 'string',
        'seat' => 'string',
        'section' => 'string',
        'ticket_holder' => 'string',
        'event_id' => 'string',
        'status' => 'string',
        'pkpass' => 'string',
        'jwt' => 'string',
        'pass_created_at' => 'string',
        'pass_updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'ref_id' => null,
        'token' => null,
        'gate' => null,
        'seat' => null,
        'section' => null,
        'ticket_holder' => null,
        'event_id' => null,
        'status' => null,
        'pkpass' => null,
        'jwt' => null,
        'pass_created_at' => null,
        'pass_updated_at' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'ref_id' => 'refId',
        'token' => 'token',
        'gate' => 'gate',
        'seat' => 'seat',
        'section' => 'section',
        'ticket_holder' => 'ticket_holder',
        'event_id' => 'event_id',
        'status' => 'status',
        'pkpass' => 'pkpass',
        'jwt' => 'jwt',
        'pass_created_at' => 'pass_created_at',
        'pass_updated_at' => 'pass_updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'ref_id' => 'setRefId',
        'token' => 'setToken',
        'gate' => 'setGate',
        'seat' => 'setSeat',
        'section' => 'setSection',
        'ticket_holder' => 'setTicketHolder',
        'event_id' => 'setEventId',
        'status' => 'setStatus',
        'pkpass' => 'setPkpass',
        'jwt' => 'setJwt',
        'pass_created_at' => 'setPassCreatedAt',
        'pass_updated_at' => 'setPassUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'ref_id' => 'getRefId',
        'token' => 'getToken',
        'gate' => 'getGate',
        'seat' => 'getSeat',
        'section' => 'getSection',
        'ticket_holder' => 'getTicketHolder',
        'event_id' => 'getEventId',
        'status' => 'getStatus',
        'pkpass' => 'getPkpass',
        'jwt' => 'getJwt',
        'pass_created_at' => 'getPassCreatedAt',
        'pass_updated_at' => 'getPassUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['ref_id'] = isset($data['ref_id']) ? $data['ref_id'] : null;
        $this->container['token'] = isset($data['token']) ? $data['token'] : null;
        $this->container['gate'] = isset($data['gate']) ? $data['gate'] : null;
        $this->container['seat'] = isset($data['seat']) ? $data['seat'] : null;
        $this->container['section'] = isset($data['section']) ? $data['section'] : null;
        $this->container['ticket_holder'] = isset($data['ticket_holder']) ? $data['ticket_holder'] : null;
        $this->container['event_id'] = isset($data['event_id']) ? $data['event_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['pkpass'] = isset($data['pkpass']) ? $data['pkpass'] : null;
        $this->container['jwt'] = isset($data['jwt']) ? $data['jwt'] : null;
        $this->container['pass_created_at'] = isset($data['pass_created_at']) ? $data['pass_created_at'] : null;
        $this->container['pass_updated_at'] = isset($data['pass_updated_at']) ? $data['pass_updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['ref_id'] === null) {
            $invalidProperties[] = "'ref_id' can't be null";
        }
        if ($this->container['token'] === null) {
            $invalidProperties[] = "'token' can't be null";
        }
        if ($this->container['event_id'] === null) {
            $invalidProperties[] = "'event_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id ID
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets ref_id
     *
     * @return string
     */
    public function getRefId()
    {
        return $this->container['ref_id'];
    }

    /**
     * Sets ref_id
     *
     * @param string $ref_id Ref Id
     *
     * @return $this
     */
    public function setRefId($ref_id)
    {
        $this->container['ref_id'] = $ref_id;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token Token
     *
     * @return $this
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets gate
     *
     * @return string|null
     */
    public function getGate()
    {
        return $this->container['gate'];
    }

    /**
     * Sets gate
     *
     * @param string|null $gate Gate info
     *
     * @return $this
     */
    public function setGate($gate)
    {
        $this->container['gate'] = $gate;

        return $this;
    }

    /**
     * Gets seat
     *
     * @return string|null
     */
    public function getSeat()
    {
        return $this->container['seat'];
    }

    /**
     * Sets seat
     *
     * @param string|null $seat Seat info
     *
     * @return $this
     */
    public function setSeat($seat)
    {
        $this->container['seat'] = $seat;

        return $this;
    }

    /**
     * Gets section
     *
     * @return string|null
     */
    public function getSection()
    {
        return $this->container['section'];
    }

    /**
     * Sets section
     *
     * @param string|null $section Row info
     *
     * @return $this
     */
    public function setSection($section)
    {
        $this->container['section'] = $section;

        return $this;
    }

    /**
     * Gets ticket_holder
     *
     * @return string|null
     */
    public function getTicketHolder()
    {
        return $this->container['ticket_holder'];
    }

    /**
     * Sets ticket_holder
     *
     * @param string|null $ticket_holder Ticket holder
     *
     * @return $this
     */
    public function setTicketHolder($ticket_holder)
    {
        $this->container['ticket_holder'] = $ticket_holder;

        return $this;
    }

    /**
     * Gets event_id
     *
     * @return string
     */
    public function getEventId()
    {
        return $this->container['event_id'];
    }

    /**
     * Sets event_id
     *
     * @param string $event_id Event Id
     *
     * @return $this
     */
    public function setEventId($event_id)
    {
        $this->container['event_id'] = $event_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Event Id
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets pkpass
     *
     * @return string|null
     */
    public function getPkpass()
    {
        return $this->container['pkpass'];
    }

    /**
     * Sets pkpass
     *
     * @param string|null $pkpass Apple Wallet pkpass link
     *
     * @return $this
     */
    public function setPkpass($pkpass)
    {
        $this->container['pkpass'] = $pkpass;

        return $this;
    }

    /**
     * Gets jwt
     *
     * @return string|null
     */
    public function getJwt()
    {
        return $this->container['jwt'];
    }

    /**
     * Sets jwt
     *
     * @param string|null $jwt Google pay pass jwt link
     *
     * @return $this
     */
    public function setJwt($jwt)
    {
        $this->container['jwt'] = $jwt;

        return $this;
    }

    /**
     * Gets pass_created_at
     *
     * @return string|null
     */
    public function getPassCreatedAt()
    {
        return $this->container['pass_created_at'];
    }

    /**
     * Sets pass_created_at
     *
     * @param string|null $pass_created_at Generated pass create time
     *
     * @return $this
     */
    public function setPassCreatedAt($pass_created_at)
    {
        $this->container['pass_created_at'] = $pass_created_at;

        return $this;
    }

    /**
     * Gets pass_updated_at
     *
     * @return string|null
     */
    public function getPassUpdatedAt()
    {
        return $this->container['pass_updated_at'];
    }

    /**
     * Sets pass_updated_at
     *
     * @param string|null $pass_updated_at Generated pass create time
     *
     * @return $this
     */
    public function setPassUpdatedAt($pass_updated_at)
    {
        $this->container['pass_updated_at'] = $pass_updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * NewCredential
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Team Pass API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * NewCredential Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class NewCredential implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NewCredential';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'service_account' => 'string',
        'google_issuer_id' => 'string',
        'project_id' => 'string',
        'private_key_id' => 'string',
        'private_key' => 'string',
        'client_email' => 'string',
        'client_id' => 'string',
        'auth_uri' => 'string',
        'token_uri' => 'string',
        'auth_provider_x509_cert_url' => 'string',
        'client_x509_cert_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'name' => null,
        'service_account' => null,
        'google_issuer_id' => null,
        'project_id' => null,
        'private_key_id' => null,
        'private_key' => null,
        'client_email' => null,
        'client_id' => null,
        'auth_uri' => null,
        'token_uri' => null,
        'auth_provider_x509_cert_url' => null,
        'client_x509_cert_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'service_account' => 'serviceAccount',
        'google_issuer_id' => 'googleIssuerId',
        'project_id' => 'projectId',
        'private_key_id' => 'privateKeyId',
        'private_key' => 'privateKey',
        'client_email' => 'clientEmail',
        'client_id' => 'clientId',
        'auth_uri' => 'authUri',
        'token_uri' => 'tokenUri',
        'auth_provider_x509_cert_url' => 'authProviderX509CertUrl',
        'client_x509_cert_url' => 'clientX509CertUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'service_account' => 'setServiceAccount',
        'google_issuer_id' => 'setGoogleIssuerId',
        'project_id' => 'setProjectId',
        'private_key_id' => 'setPrivateKeyId',
        'private_key' => 'setPrivateKey',
        'client_email' => 'setClientEmail',
        'client_id' => 'setClientId',
        'auth_uri' => 'setAuthUri',
        'token_uri' => 'setTokenUri',
        'auth_provider_x509_cert_url' => 'setAuthProviderX509CertUrl',
        'client_x509_cert_url' => 'setClientX509CertUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'service_account' => 'getServiceAccount',
        'google_issuer_id' => 'getGoogleIssuerId',
        'project_id' => 'getProjectId',
        'private_key_id' => 'getPrivateKeyId',
        'private_key' => 'getPrivateKey',
        'client_email' => 'getClientEmail',
        'client_id' => 'getClientId',
        'auth_uri' => 'getAuthUri',
        'token_uri' => 'getTokenUri',
        'auth_provider_x509_cert_url' => 'getAuthProviderX509CertUrl',
        'client_x509_cert_url' => 'getClientX509CertUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['service_account'] = isset($data['service_account']) ? $data['service_account'] : null;
        $this->container['google_issuer_id'] = isset($data['google_issuer_id']) ? $data['google_issuer_id'] : null;
        $this->container['project_id'] = isset($data['project_id']) ? $data['project_id'] : null;
        $this->container['private_key_id'] = isset($data['private_key_id']) ? $data['private_key_id'] : null;
        $this->container['private_key'] = isset($data['private_key']) ? $data['private_key'] : null;
        $this->container['client_email'] = isset($data['client_email']) ? $data['client_email'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['auth_uri'] = isset($data['auth_uri']) ? $data['auth_uri'] : null;
        $this->container['token_uri'] = isset($data['token_uri']) ? $data['token_uri'] : null;
        $this->container['auth_provider_x509_cert_url'] = isset($data['auth_provider_x509_cert_url']) ? $data['auth_provider_x509_cert_url'] : null;
        $this->container['client_x509_cert_url'] = isset($data['client_x509_cert_url']) ? $data['client_x509_cert_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['service_account'] === null) {
            $invalidProperties[] = "'service_account' can't be null";
        }
        if ($this->container['google_issuer_id'] === null) {
            $invalidProperties[] = "'google_issuer_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of Google Credential
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets service_account
     *
     * @return string
     */
    public function getServiceAccount()
    {
        return $this->container['service_account'];
    }

    /**
     * Sets service_account
     *
     * @param string $service_account Google Service Account
     *
     * @return $this
     */
    public function setServiceAccount($service_account)
    {
        $this->container['service_account'] = $service_account;

        return $this;
    }

    /**
     * Gets google_issuer_id
     *
     * @return string
     */
    public function getGoogleIssuerId()
    {
        return $this->container['google_issuer_id'];
    }

    /**
     * Sets google_issuer_id
     *
     * @param string $google_issuer_id Google Issuer Id
     *
     * @return $this
     */
    public function setGoogleIssuerId($google_issuer_id)
    {
        $this->container['google_issuer_id'] = $google_issuer_id;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return string|null
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param string|null $project_id Project Id
     *
     * @return $this
     */
    public function setProjectId($project_id)
    {
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets private_key_id
     *
     * @return string|null
     */
    public function getPrivateKeyId()
    {
        return $this->container['private_key_id'];
    }

    /**
     * Sets private_key_id
     *
     * @param string|null $private_key_id Private Key Id
     *
     * @return $this
     */
    public function setPrivateKeyId($private_key_id)
    {
        $this->container['private_key_id'] = $private_key_id;

        return $this;
    }

    /**
     * Gets private_key
     *
     * @return string|null
     */
    public function getPrivateKey()
    {
        return $this->container['private_key'];
    }

    /**
     * Sets private_key
     *
     * @param string|null $private_key Private Key
     *
     * @return $this
     */
    public function setPrivateKey($private_key)
    {
        $this->container['private_key'] = $private_key;

        return $this;
    }

    /**
     * Gets client_email
     *
     * @return string|null
     */
    public function getClientEmail()
    {
        return $this->container['client_email'];
    }

    /**
     * Sets client_email
     *
     * @param string|null $client_email Client Email
     *
     * @return $this
     */
    public function setClientEmail($client_email)
    {
        $this->container['client_email'] = $client_email;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string|null
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string|null $client_id Client Id
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets auth_uri
     *
     * @return string|null
     */
    public function getAuthUri()
    {
        return $this->container['auth_uri'];
    }

    /**
     * Sets auth_uri
     *
     * @param string|null $auth_uri Auth URI
     *
     * @return $this
     */
    public function setAuthUri($auth_uri)
    {
        $this->container['auth_uri'] = $auth_uri;

        return $this;
    }

    /**
     * Gets token_uri
     *
     * @return string|null
     */
    public function getTokenUri()
    {
        return $this->container['token_uri'];
    }

    /**
     * Sets token_uri
     *
     * @param string|null $token_uri Token URI
     *
     * @return $this
     */
    public function setTokenUri($token_uri)
    {
        $this->container['token_uri'] = $token_uri;

        return $this;
    }

    /**
     * Gets auth_provider_x509_cert_url
     *
     * @return string|null
     */
    public function getAuthProviderX509CertUrl()
    {
        return $this->container['auth_provider_x509_cert_url'];
    }

    /**
     * Sets auth_provider_x509_cert_url
     *
     * @param string|null $auth_provider_x509_cert_url Auth Provider X509 Cert Url
     *
     * @return $this
     */
    public function setAuthProviderX509CertUrl($auth_provider_x509_cert_url)
    {
        $this->container['auth_provider_x509_cert_url'] = $auth_provider_x509_cert_url;

        return $this;
    }

    /**
     * Gets client_x509_cert_url
     *
     * @return string|null
     */
    public function getClientX509CertUrl()
    {
        return $this->container['client_x509_cert_url'];
    }

    /**
     * Sets client_x509_cert_url
     *
     * @param string|null $client_x509_cert_url Client X509 Cert Url
     *
     * @return $this
     */
    public function setClientX509CertUrl($client_x509_cert_url)
    {
        $this->container['client_x509_cert_url'] = $client_x509_cert_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


